/*
 * Copyright 2016 Mark Slater
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
 *
 * 	http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3'
    }
}

plugins {
    id 'org.hidetake.ssh' version '2.1.0'
    id 'at.bxm.svntools' version '1.6.1'
}

apply plugin: 'io.codearte.nexus-staging'
apply plugin: 'java'

repositories {
    mavenCentral()
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14.1'
}

build.mustRunAfter clean
uploadArchives.mustRunAfter build
closeAndPromoteRepository.mustRunAfter uploadArchives

sourceSets {
    testInfrastructure
    performanceTest
    codeSamples
    documentation
}

configurations {
    testCompile {
        extendsFrom testInfrastructureCompile
    }
    codeSamplesCompile {
        extendsFrom testInfrastructureCompile
    }
    performanceTestCompile {
        extendsFrom testInfrastructureCompile
    }
    svg2ico
}

dependencies {
    testInfrastructureCompile sourceSets.main.output
    codeSamplesCompile sourceSets.main.output
    testInfrastructureCompile group: 'commons-io', name: 'commons-io', version: '2.5'
    testInfrastructureCompile group: 'commons-lang', name: 'commons-lang', version: '2.4'
    testInfrastructureCompile group: 'com.google.guava', name: 'guava', version: '19.0'
    testInfrastructureCompile group: 'org.hamcrest', name: 'java-hamcrest', version: '2.0.0.0'
    testInfrastructureCompile group: 'org.jmock', name: 'jmock', version: '2.8.2'
    testInfrastructureCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile sourceSets.testInfrastructure.output
    documentationCompile sourceSets.main.output
    performanceTestCompile sourceSets.testInfrastructure.output
    performanceTestCompile group: 'net.sf.json-lib', name: 'json-lib', version: '2.2.2', classifier: 'jdk15'
    documentationCompile group: 'net.sourceforge.writexml', name: 'writexml', version: '1.1' // TODO - just for POM generation?
    documentationCompile group: 'net.sourceforge.xazzle', name: 'xazzle', version: '0.39'
    svg2ico group: 'net.sourceforge.svg2ico', name: 'svg2ico', version: '1.5'
}

group = 'net.sourceforge.argo'
archivesBaseName = 'argo'
//version = "${majorVersion}.${minorVersion}"
version = 3.22
description = 'Argo is an open source JSON parser and generator written in Java.  It offers document, push, and pull APIs.'

task deploy(group: 'release', description: 'Push the latest to Maven Central', dependsOn: ['clean', 'build', 'uploadArchives', 'closeAndPromoteRepository']) << {
    ant.propertyfile(file: file('gradle.properties')) {
        entry(key: 'minorVersion', type: 'int', operation: '+', value: 1)
    }
}

compileJava {
    sourceCompatibility = 1.5
    targetCompatibility = 1.5
}

task myJavadoc(type: Javadoc) {
    source = sourceSets.main.allJava
    title = "Argo version ${version}"
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from myJavadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task combinedJar(type: Jar) {
    classifier = 'combined'
    from sourceSets.main.allSource
    from sourceSets.main.output
}

artifacts {
    archives javadocJar, sourcesJar
}

task documentationDirectory << {
    mkdir('build/documentation')
}

task ico(dependsOn: documentationDirectory) << {
    ant.taskdef(name: 'svg2ico',
            classname: 'net.sourceforge.svg2ico.Svg2IcoTask',
            classpath: configurations.svg2ico.asPath)
    ant.svg2ico(src: 'resources/favicon.svg',
            dest: 'build/documentation/favicon.ico',
            width: '32',
            height: '32'
    )
    // todo png favicons
}

task buildDocumentation(type:JavaExec, dependsOn: documentationDirectory) {
    main = 'documentation.DocumentationGenerator'
    args('build/documentation')
    classpath = sourceSets.documentation.runtimeClasspath
}

task documentationJar(type: Tar, dependsOn: [ buildDocumentation, ico]) {
    from 'build/documentation'
    baseName 'documentation'
    compression = Compression.GZIP
}

remotes {
    sourceforgeShell {
        host = 'shell.sourceforge.net'
        user = "$sourceforgeUser,argo"
        password = "$sourceforgePassword"

    }
    sourceforgeWeb {
        host = 'web.sourceforge.net'
        user = "$sourceforgeUser,argo"
        password = "$sourceforgePassword"

    }
}

task copyToSourceforge(dependsOn: [jar, documentationJar, javadocJar, combinedJar]) << {
    ssh.run {
        session(remotes.sourceforgeShell) {
            execute 'create'
        }
        session(remotes.sourceforgeWeb) {
            put from: "build/distributions/documentation-${version}.tgz", into: '/home/project-web/argo/'
            put from: "build/libs/argo-${version}-javadoc.jar", into: '/home/project-web/argo/'
            put from: "build/libs/argo-${version}-combined.jar", into: "/home/frs/project/argo/argo/${version}/argo-${version}.jar"
            put from: "build/libs/argo-${version}.jar", into: "/home/frs/project/argo/argo/${version}/argo-small-${version}.jar"
        }
        session(remotes.sourceforgeShell) {
            execute "mkdir -p /home/project-web/argo/${version}/javadoc && tar -xvf /home/project-web/argo/documentation-${version}.tgz -C /home/project-web/argo/${version} && unzip -d /home/project-web/argo/${version}/javadoc /home/project-web/argo/argo-${version}-javadoc.jar && rm /home/project-web/argo/documentation-${version}.tgz && rm /home/project-web/argo/argo-${version}-javadoc.jar && rm /home/project-web/argo/htdocs ; ln -s /home/project-web/argo/${version} /home/project-web/argo/htdocs"
        }
    }
    // todo turn off debug information in tiny jar (existing bug)
    // todo update default download
    // todo auto-increment version number
    // todo commit auto-incremented version number
    // todo drop repository post-promotion
    // todo include static documentation
}

apply plugin: 'signing'
apply plugin: 'maven'

// Signature of artifacts
signing {
    sign configurations.archives
}

// OSSRH publication
uploadArchives {
    repositories {
        mavenDeployer {
            // POM signature
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            // Target repository
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUser, password: ossrhPassword)
            }
            pom.scopeMappings.with {
                mappings.clear()
            }
            pom.project {
                name project.name
                description project.description
                packaging 'jar'
                url 'http://argo.sourceforge.net'

                scm {
                    url "https://svn.code.sf.net/p/argo/code/tags/${version}"
                }

                developers {
                    developer {
                        id = 'mos20'
                        name = 'Mark Slater'
                    }
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

            }
        }
    }
}

nexusStaging {
    username = ossrhUser
    password = ossrhPassword
}

task svnTag(type: at.bxm.gradleplugins.svntools.tasks.SvnTag) {
    tagName = "$version"
    svnUrl = 'https://svn.code.sf.net/p/argo/code/trunk'
    commitMessage = "Tag for release ${version}."
    username = "$sourceforgeUser"
    password = "$sourceforgePassword"
}

task performRelease (dependsOn: [clean, build, uploadArchives, copyToSourceforge, closeAndPromoteRepository, svnTag]) << {
    println 'BOOM!'
}