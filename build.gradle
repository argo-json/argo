/*
 *  Copyright 2023 Mark Slater
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
 *
 *  	http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 */

import java.net.http.HttpClient
import java.net.http.HttpRequest
import java.net.http.HttpResponse

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'signing'
    id 'maven-publish'
    id 'idea'
    id 'pmd'
    id 'java-test-fixtures'
    id 'jvm-test-suite'
    id 'me.champeau.jmh' version '0.7.2'
    id 'com.github.spotbugs' version '5.0.14'
    id 'org.hidetake.ssh' version '2.11.2'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
    id 'com.gitlab.svg2ico' version '0.14'
}

repositories {
    mavenCentral()
}

final def documentationDirectory = new File(project.buildDir, 'documentation')

sourceSets {
    moduleInfo
    documentation
}

testing {
    suites {
        test {
            useJUnitJupiter()
            dependencies {
                implementation 'org.junit.jupiter:junit-jupiter-api:5.9.3'
                implementation 'org.hamcrest:hamcrest:2.2'
                implementation 'net.sourceforge.ickles:ickles:0.21'
                implementation 'commons-io:commons-io:2.15.1'
                runtimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.3'
            }
        }

        codeSamples(JvmTestSuite) {
            useJUnitJupiter()
            dependencies {
                implementation project()
                implementation testFixtures(project())
                implementation 'commons-io:commons-io:2.15.1'
                implementation 'org.hamcrest:hamcrest:2.2'
            }
        }
    }
}

tasks.named('check') {
    dependsOn(testing.suites.codeSamples)
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

dependencies {
    moduleInfoImplementation sourceSets.main.output

    testFixturesImplementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    testFixturesImplementation group: 'commons-io', name: 'commons-io', version: '2.15.1'
    testFixturesImplementation group: 'net.sourceforge.ickles', name: 'ickles', version: '0.21'
    testFixturesImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'

    documentationImplementation sourceSets.main.output
    documentationImplementation group: 'net.sourceforge.urin', name: 'urin', version: '4.1'
    documentationImplementation group: 'net.sourceforge.writexml', name: 'writexml', version: '1.3'
    documentationImplementation group: 'net.sourceforge.xazzle', name: 'xazzle', version: '0.39'

    spotbugs group: 'com.github.spotbugs', name: 'spotbugs', version: '4.8.3'

    jmhImplementation testFixtures(project)
}

group = 'net.sourceforge.argo'
archivesBaseName = 'argo'
version = "${majorVersion}.${minorVersion}"
description = 'Argo is an open source JSON parser and generator written in Java.  It offers document, push, and pull APIs.'

idea {
    project {
        jdkName = 1.8
        languageLevel = '1.5'
    }
    module {
        jdkName = 11
    }
}

compileJava {
    sourceCompatibility = 1.5
    targetCompatibility = 1.5
}

tasks.register('compileTinyJava', JavaCompile) {
    sourceCompatibility = 1.5
    targetCompatibility = 1.5
    javaCompiler.set javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(8)
    }
    source sourceSets.main.allSource
    classpath = sourceSets.main.compileClasspath
    destinationDirectory.set(file("${project.buildDir}/tiny-classes/main"))
    options.compilerArgs = ['-g:none']
}

compileModuleInfoJava {
    sourceCompatibility = 9
    targetCompatibility = 9
    javaCompiler.set javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(9)
    }
    doFirst {
        classpath += sourceSets.main.compileClasspath

        options.compilerArgs = [
                '--module-path', classpath.asPath,
//                '--add-modules', 'ALL-SYSTEM',
                '-d', sourceSets.main.output.classesDirs.asPath
        ]
    }
}

tasks.register('myJavadoc', Javadoc) {
    source = sourceSets.main.allJava
    title = "Argo version ${version}"
}

tasks.register('javadocJar', Jar) {
    archiveClassifier.set 'javadoc'
    from myJavadoc
}

tasks.register('tinyJar', Jar) {
    dependsOn compileTinyJava
    archiveClassifier.set 'tiny'
    from file("${project.buildDir}/tiny-classes/main")
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier.set 'sources'
    from sourceSets.main.allSource
}

tasks.register('combinedJar', Jar) {
    archiveClassifier.set 'combined'
    from sourceSets.main.allSource
    from sourceSets.main.output
}

jar {
    from sourceSets.main.output
    from sourceSets.moduleInfo.output
}

pmd {
    toolVersion = '6.29.0'
    ruleSetFiles = files('tools/pmd-ruleset.xml')
    ruleSets = []
}

pmdMain {
    ruleSetFiles = files('tools/pmd-ruleset.xml', 'tools/pmd-main-extra-ruleset.xml')
    ruleSets = []
}

spotbugsTest {
    excludeFilter = file('tools/spotbugs-test-filter.xml')
}

artifacts {
    archives javadocJar, sourcesJar
}

tasks.register('ico', Svg2IcoTask) {
    destination = new File(documentationDirectory, 'favicon.ico')
    input {
        source = file('resources/favicon.svg')
        width = 32
        height = 32
    }
}

tasks.register('png', Svg2PngTask) {
    source = file('resources/favicon.svg')
    destination = file("${project.buildDir}/icons/favicon.png")
    width = 128
    height = 128
}


tasks.register('buildDocumentation', JavaExec) {
    outputs.dir(documentationDirectory)
    mainClass = 'documentation.DocumentationGenerator'
    args(documentationDirectory.toString())
    classpath = sourceSets.documentation.runtimeClasspath
}

tasks.register('documentationJar', Tar) {
    dependsOn buildDocumentation, ico
    from documentationDirectory
    from 'docs'
    archiveBaseName.set('documentation')
    compression = Compression.GZIP
}

remotes {
    sourceforgeShell {
        host = 'shell.sourceforge.net'
        user = "$sourceforgeUser,argo"
        password = "$sourceforgePassword"

    }
    sourceforgeWeb {
        host = 'web.sourceforge.net'
        user = "$sourceforgeUser,argo"
        password = "$sourceforgePassword"

    }
}

tasks.register('copyToSourceforge') {
    dependsOn jar, documentationJar, javadocJar, combinedJar, tinyJar
    doLast {
        ssh.runInOrder {
            session(remotes.sourceforgeShell) {
                execute 'create'
                execute "mkdir -p /home/frs/project/argo/argo/${version}"
            }
            session(remotes.sourceforgeWeb) {
                put from: "${project.buildDir}/distributions/documentation-${version}.tgz", into: '/home/project-web/argo/'
                put from: "${project.buildDir}/libs/argo-${version}-javadoc.jar", into: '/home/project-web/argo/'
                put from: "${project.buildDir}/libs/argo-${version}-combined.jar", into: "/home/frs/project/argo/argo/${version}/argo-${version}.jar"
                put from: "${project.buildDir}/libs/argo-${version}-tiny.jar", into: "/home/frs/project/argo/argo/${version}/argo-small-${version}.jar"
            }
            session(remotes.sourceforgeShell) {
                execute "mkdir -p /home/project-web/argo/${version}/javadoc && tar -xvf /home/project-web/argo/documentation-${version}.tgz -C /home/project-web/argo/${version} && unzip -d /home/project-web/argo/${version}/javadoc /home/project-web/argo/argo-${version}-javadoc.jar && rm /home/project-web/argo/documentation-${version}.tgz && rm /home/project-web/argo/argo-${version}-javadoc.jar && rm /home/project-web/argo/htdocs ; ln -s /home/project-web/argo/${version} /home/project-web/argo/htdocs"
            }
        }
    }
}

tasks.register('updateSourceforgeDefaultDownload') {
    it.doLast {
        def response = HttpClient.newHttpClient()
                .send(
                        HttpRequest.newBuilder(URI.create("https://sourceforge.net/projects/argo/files/argo/${version}//argo-${version}.jar"))
                                .PUT(HttpRequest.BodyPublishers.ofString("default=windows&default=mac&default=linux&default=bsd&default=solaris&default=others&download_label=${version}%20with%20source&api_key=$sourceforgeApiKey"))
                                .setHeader("content-type", "application/x-www-form-urlencoded")
                                .build(),
                        HttpResponse.BodyHandlers.ofString()
                )
        if (response.statusCode() < 200 || response.statusCode() >= 400) {
            throw new GradleException("updating SourceForge default download resulted in response code ${response.statusCode()} with body\n${response.body()}")
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(sourcesJar)
            artifact(javadocJar)
            from components.java
            pom {
                name = 'Argo'
                description = project.description
                url = 'http://argo.sourceforge.net'
                scm {
                    url = 'git://git.code.sf.net/p/argo/git'
                }
                developers {
                    developer {
                        id = 'mos20'
                        name = 'Mark Slater'
                    }
                }
                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

nexusPublishing {
    repositories {
        sonatype {
            stagingProfileId = '12462889504a1e'
            username = project.findProperty('ossrhUser')
            password = project.findProperty('ossrhPassword')
        }
    }
}

tasks.register('performRelease') {
    dependsOn clean, build, publishToSonatype, copyToSourceforge, png, closeAndReleaseStagingRepository, updateSourceforgeDefaultDownload
    doLast {
        println 'Release complete :)'
    }
}

tasks.register('buildAndDeployCleanVersion') {
    dependsOn clean, performRelease
}

tasks.register('incrementVersionNumber') {
    dependsOn buildAndDeployCleanVersion
    doLast {
        ant.propertyfile(file: file('gradle.properties')) {
            entry(key: 'minorVersion', type: 'int', operation: '+', value: 1)
        }
    }
}

tasks.register('deploy') {
    dependsOn incrementVersionNumber
}

updateSourceforgeDefaultDownload.mustRunAfter copyToSourceforge