/*
 *  Copyright  2021 Mark Slater
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
 *
 *  	http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 */
buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'signing'
    id 'maven-publish'
    id 'idea'
    id 'pmd'
    id 'com.github.spotbugs' version '5.0.14'
    id 'org.hidetake.ssh' version '2.11.2'
    id 'org.tenne.rest' version '0.4.2'
    id 'io.codearte.nexus-staging' version '0.22.0'
    id 'de.marcphilipp.nexus-publish' version '0.4.0'
    id 'com.gitlab.svg2ico' version '0.14'
    id 'org.unbroken-dome.test-sets' version '4.0.0'
}

repositories {
    mavenCentral()
}

sourceSets {
    moduleInfo
    documentation
}

testSets {
    libraries { testInfrastructure }
    unitTest { imports libraries.testInfrastructure }
    performanceTest { imports libraries.testInfrastructure }
    codeSamples { imports libraries.testInfrastructure }
}

check.dependsOn performanceTest
check.dependsOn codeSamples

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

dependencies {
    moduleInfoImplementation sourceSets.main.output

    testInfrastructureImplementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'
    testInfrastructureImplementation group: 'net.sourceforge.ickles', name: 'ickles', version: '0.18'
    testInfrastructureImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.7.0'
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
    testImplementation group: 'org.jmock', name: 'jmock-junit5', version: '2.12.0'
    testImplementation group: 'net.sourceforge.ickles', name: 'ickles', version: '0.18'
    testImplementation group: 'commons-io', name: 'commons-io', version: '2.8.0'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.7.0'

    performanceTestImplementation group: 'net.sf.json-lib', name: 'json-lib', version: '2.4', classifier: 'jdk15'

    documentationImplementation sourceSets.main.output
    documentationImplementation group: 'net.sourceforge.urin', name: 'urin', version: '4.1'
    documentationImplementation group: 'net.sourceforge.writexml', name: 'writexml', version: '1.3'
    documentationImplementation group: 'net.sourceforge.xazzle', name: 'xazzle', version: '0.39'

    spotbugs group: 'com.github.spotbugs', name: 'spotbugs', version: '4.2.0'
}

group = 'net.sourceforge.argo'
archivesBaseName = 'argo'
version = "${majorVersion}.${minorVersion}"
description = 'Argo is an open source JSON parser and generator written in Java.  It offers document, push, and pull APIs.'

idea {
    project {
        jdkName = 1.8
        languageLevel = '1.5'
    }
    module {
        jdkName = 11
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

compileJava {
    sourceCompatibility = 1.5
    targetCompatibility = 1.5
}

task compileTinyJava(type: JavaCompile) {
    sourceCompatibility = 1.5
    targetCompatibility = 1.5
    javaCompiler.set javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(8)
    }
    source sourceSets.main.allSource
    classpath = sourceSets.main.compileClasspath
    destinationDir = file("${project.buildDir}/tiny-classes/main")
    options.compilerArgs = ['-g:none']
}

compileModuleInfoJava {
    sourceCompatibility = 9
    targetCompatibility = 9
    javaCompiler.set javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(9)
    }
    doFirst {
        classpath += sourceSets.main.compileClasspath

        options.compilerArgs = [
                '--module-path', classpath.asPath,
//                '--add-modules', 'ALL-SYSTEM',
                '-d', sourceSets.main.output.classesDirs.asPath
        ]
    }
}

task myJavadoc(type: Javadoc) {
    source = sourceSets.main.allJava
    title = "Argo version ${version}"
}

task javadocJar(type: Jar) {
    archiveClassifier.set 'javadoc'
    from myJavadoc
}

task tinyJar(type: Jar, dependsOn: compileTinyJava) {
    archiveClassifier.set 'tiny'
    from file("${project.buildDir}/tiny-classes/main")
}

task sourcesJar(type: Jar) {
    archiveClassifier.set 'sources'
    from sourceSets.main.allSource
}

task combinedJar(type: Jar) {
    archiveClassifier.set 'combined'
    from sourceSets.main.allSource
    from sourceSets.main.output
}

jar {
    from sourceSets.main.output
    from sourceSets.moduleInfo.output
}

pmd {
    toolVersion = '6.29.0'
    ruleSetFiles = files('tools/pmd-ruleset.xml')
    ruleSets = []
}

pmdMain {
    ruleSetFiles = files('tools/pmd-ruleset.xml', 'tools/pmd-main-extra-ruleset.xml')
    ruleSets = []
}

artifacts {
    archives javadocJar, sourcesJar
}

task documentationDirectory {
    doLast {
        mkdir("${project.buildDir}/documentation")
    }
}

task ico(type: Svg2IcoTask, dependsOn: documentationDirectory) {
    destination = file("${project.buildDir}/documentation/favicon.ico")
    input {
        source = file('resources/favicon.svg')
        width = 32
        height = 32
    }
}

task png(type: Svg2PngTask) {
    source = file('resources/favicon.svg')
    destination = file("${project.buildDir}/icons/favicon.png")
    width = 128
    height = 128
}


task buildDocumentation(type: JavaExec, dependsOn: documentationDirectory) {
    main = 'documentation.DocumentationGenerator'
    args("${project.buildDir}/documentation")
    classpath = sourceSets.documentation.runtimeClasspath
}

task documentationJar(type: Tar, dependsOn: [buildDocumentation, ico]) {
    from "${project.buildDir}/documentation"
    from 'docs'
    archiveBaseName.set('documentation')
    compression = Compression.GZIP
}

remotes {
    sourceforgeShell {
        host = 'shell.sourceforge.net'
        user = "$sourceforgeUser,argo"
        password = "$sourceforgePassword"

    }
    sourceforgeWeb {
        host = 'web.sourceforge.net'
        user = "$sourceforgeUser,argo"
        password = "$sourceforgePassword"

    }
}

task copyToSourceforge(dependsOn: [jar, documentationJar, javadocJar, combinedJar, tinyJar]) {
    doLast {
        ssh.runInOrder {
            session(remotes.sourceforgeShell) {
                execute 'create'
                execute "mkdir -p /home/frs/project/argo/argo/${version}"
            }
            session(remotes.sourceforgeWeb) {
                put from: "${project.buildDir}/distributions/documentation-${version}.tgz", into: '/home/project-web/argo/'
                put from: "${project.buildDir}/libs/argo-${version}-javadoc.jar", into: '/home/project-web/argo/'
                put from: "${project.buildDir}/libs/argo-${version}-combined.jar", into: "/home/frs/project/argo/argo/${version}/argo-${version}.jar"
                put from: "${project.buildDir}/libs/argo-${version}-tiny.jar", into: "/home/frs/project/argo/argo/${version}/argo-small-${version}.jar"
            }
            session(remotes.sourceforgeShell) {
                execute "mkdir -p /home/project-web/argo/${version}/javadoc && tar -xvf /home/project-web/argo/documentation-${version}.tgz -C /home/project-web/argo/${version} && unzip -d /home/project-web/argo/${version}/javadoc /home/project-web/argo/argo-${version}-javadoc.jar && rm /home/project-web/argo/documentation-${version}.tgz && rm /home/project-web/argo/argo-${version}-javadoc.jar && rm /home/project-web/argo/htdocs ; ln -s /home/project-web/argo/${version} /home/project-web/argo/htdocs"
            }
        }
    }
}

task updateSourceforgeDefaultDownload(type: org._10ne.gradle.rest.RestTask) {
    httpMethod = 'put'
    uri = "https://sourceforge.net/projects/argo/files/argo/${version}//argo-${version}.jar"
    requestContentType = groovyx.net.http.ContentType.URLENC
    contentType = groovyx.net.http.ContentType.JSON
    requestBody = "default=windows&default=mac&default=linux&default=bsd&default=solaris&default=others&download_label=${version}%20with%20source&api_key=$sourceforgeApiKey"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(sourcesJar)
            artifact(javadocJar)
            from components.java
            pom {
                name = 'Argo'
                description = project.description
                url = 'http://argo.sourceforge.net'
                scm {
                    url = 'git://git.code.sf.net/p/argo/git'
                }
                developers {
                    developer {
                        id = 'mos20'
                        name = 'Mark Slater'
                    }
                }
                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

nexusStaging {
    username = ossrhUser
    password = ossrhPassword
}

task performRelease(dependsOn: [clean, build, publishToSonatype, copyToSourceforge, png, closeRepository, releaseRepository, updateSourceforgeDefaultDownload]) {
    doLast {
        println 'Release complete :)'
    }
}

task buildAndDeployCleanVersion(dependsOn: [clean, performRelease]) {
}

task incrementVersionNumber(dependsOn: buildAndDeployCleanVersion) {
    doLast {
        ant.propertyfile(file: file('gradle.properties')) {
            entry(key: 'minorVersion', type: 'int', operation: '+', value: 1)
        }
    }
}

task deploy(dependsOn: incrementVersionNumber) {}

build.mustRunAfter clean
publishToSonatype.mustRunAfter build
closeRepository.mustRunAfter publishToSonatype
releaseRepository.mustRunAfter closeRepository
updateSourceforgeDefaultDownload.mustRunAfter copyToSourceforge