/*
 *  Copyright  2019 Mark Slater
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
 *
 *  	http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 */

import at.bxm.gradleplugins.svntools.tasks.SvnCommit
import at.bxm.gradleplugins.svntools.tasks.SvnTag

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'signing'
    id 'maven'
    id 'idea'
    id 'com.github.spotbugs' version '2.0.0'
    id 'org.hidetake.ssh' version '2.1.0'
    id 'at.bxm.svntools' version '1.6.1'
    id 'org.tenne.rest' version '0.4.2'
    id 'io.codearte.nexus-staging' version '0.20.0'
    id 'com.gitlab.svg2ico' version '0.8'
    id 'org.unbroken-dome.test-sets' version '2.2.1'
}

repositories {
    mavenCentral()
}

sourceSets {
    documentation
}

testSets {
    libraries { testInfrastructure }
    unitTest {
        imports libraries.testInfrastructure
    }
    performanceTest {
        imports libraries.testInfrastructure
    }
    codeSamples {
        imports libraries.testInfrastructure
    }
}

check.dependsOn performanceTest
check.dependsOn codeSamples

configurations {
    svg2ico
    batik
}

dependencies {
    testInfrastructureCompile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    testInfrastructureCompile group: 'net.sourceforge.ickles', name: 'ickles', version: '0.13'
    testInfrastructureCompile group: 'org.hamcrest', name: 'hamcrest', version: '2.1'

    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version :'5.5.2'
    testCompile group: 'org.hamcrest', name: 'hamcrest', version: '2.1'
    testCompile group: 'org.jmock', name: 'jmock-junit5', version: '2.12.0'
    testCompile group: 'net.sourceforge.ickles', name: 'ickles', version: '0.13'
    testCompile group: 'commons-io', name: 'commons-io', version: '2.5'
    testCompile group: 'com.google.guava', name: 'guava', version: '19.0'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.5.2'

    codeSamplesCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version :'5.5.2'
    codeSamplesCompile group: 'org.hamcrest', name: 'hamcrest', version: '2.1'
    codeSamplesCompile group: 'commons-io', name: 'commons-io', version: '2.5'

    performanceTestCompile group: 'commons-io', name: 'commons-io', version: '2.5'
    performanceTestCompile group: 'net.sf.json-lib', name: 'json-lib', version: '2.2.2', classifier: 'jdk15'

    documentationCompile sourceSets.main.output
    documentationCompile group: 'net.sourceforge.writexml', name: 'writexml', version: '1.1'
    documentationCompile group: 'net.sourceforge.xazzle', name: 'xazzle', version: '0.39'

    batik group: 'org.apache.xmlgraphics', name: 'batik-rasterizer', version: '1.8'
    batik group: 'org.apache.xmlgraphics', name: 'xmlgraphics-commons', version: '2.0'
    batik group: 'org.apache.xmlgraphics', name: 'batik-codec', version: '1.8'
}

group = 'net.sourceforge.argo'
archivesBaseName = 'argo'
version = "${majorVersion}.${minorVersion}"
description = 'Argo is an open source JSON parser and generator written in Java.  It offers document, push, and pull APIs.'

idea {
    project {
        jdkName = 1.8
        languageLevel = '1.5'
    }
}

test {
    useJUnitPlatform()
}

compileJava {
    sourceCompatibility = 1.5
    targetCompatibility = 1.5
}

task compileTinyJava(type: JavaCompile) {
    sourceCompatibility = 1.5
    targetCompatibility = 1.5
    source sourceSets.main.allSource
    classpath = sourceSets.main.compileClasspath
    destinationDir = file("${project.buildDir}/tiny-classes/main")
    options.compilerArgs = ['-g:none']
}

task myJavadoc(type: Javadoc) {
    source = sourceSets.main.allJava
    title = "Argo version ${version}"
}

task javadocJar(type: Jar) {
    archiveClassifier.set 'javadoc'
    from myJavadoc
}

task tinyJar(type: Jar, dependsOn: compileTinyJava) {
    archiveClassifier.set 'tiny'
    from file("${project.buildDir}/tiny-classes/main")
}

task sourcesJar(type: Jar) {
    archiveClassifier.set 'sources'
    from sourceSets.main.allSource
}

task combinedJar(type: Jar) {
    archiveClassifier.set 'combined'
    from sourceSets.main.allSource
    from sourceSets.main.output
}

artifacts {
    archives javadocJar, sourcesJar
}

task documentationDirectory {
    doLast {
        mkdir("${project.buildDir}/documentation")
    }
}

task ico(type: Svg2IcoTask, dependsOn: documentationDirectory) {
    destination = file("${project.buildDir}/documentation/favicon.ico")
    input {
        source = file('resources/favicon.svg')
        width = 32
        height = 32
    }
}

task iconsDirectory {
    doLast {
        mkdir("${project.buildDir}/icons")
    }
}

task png(type: JavaExec, dependsOn: iconsDirectory) {
    main = 'org.apache.batik.apps.rasterizer.Main'
    classpath = configurations.batik
    args '-d', "${project.buildDir}/icons/", '-scriptSecurityOff', '-m', 'image/png', '-w', '48', '-h', '48', 'resources/favicon.svg'
}


task buildDocumentation(type:JavaExec, dependsOn: documentationDirectory) {
    main = 'documentation.DocumentationGenerator'
    args("${project.buildDir}/documentation")
    classpath = sourceSets.documentation.runtimeClasspath
}

task documentationJar(type: Tar, dependsOn: [ buildDocumentation, ico]) {
    from "${project.buildDir}/documentation"
    from 'docs'
    baseName 'documentation'
    compression = Compression.GZIP
}

remotes {
    sourceforgeShell {
        host = 'shell.sourceforge.net'
        user = "$sourceforgeUser,argo"
        password = "$sourceforgePassword"

    }
    sourceforgeWeb {
        host = 'web.sourceforge.net'
        user = "$sourceforgeUser,argo"
        password = "$sourceforgePassword"

    }
}

task copyToSourceforge(dependsOn: [jar, documentationJar, javadocJar, combinedJar, tinyJar]) {
    doLast {
        ssh.run {
            session(remotes.sourceforgeShell) {
                execute 'create'
                execute "mkdir -p /home/frs/project/argo/argo/${version}"
            }
            session(remotes.sourceforgeWeb) {
                put from: "${project.buildDir}/distributions/documentation-${version}.tgz", into: '/home/project-web/argo/'
                put from: "${project.buildDir}/libs/argo-${version}-javadoc.jar", into: '/home/project-web/argo/'
                put from: "${project.buildDir}/libs/argo-${version}-combined.jar", into: "/home/frs/project/argo/argo/${version}/argo-${version}.jar"
                put from: "${project.buildDir}/libs/argo-${version}-tiny.jar", into: "/home/frs/project/argo/argo/${version}/argo-small-${version}.jar"
            }
            session(remotes.sourceforgeShell) {
                execute "mkdir -p /home/project-web/argo/${version}/javadoc && tar -xvf /home/project-web/argo/documentation-${version}.tgz -C /home/project-web/argo/${version} && unzip -d /home/project-web/argo/${version}/javadoc /home/project-web/argo/argo-${version}-javadoc.jar && rm /home/project-web/argo/documentation-${version}.tgz && rm /home/project-web/argo/argo-${version}-javadoc.jar && rm /home/project-web/argo/htdocs ; ln -s /home/project-web/argo/${version} /home/project-web/argo/htdocs"
            }
        }
    }
}

task updateSourceforgeDefaultDownload(type: org._10ne.gradle.rest.RestTask) {
    httpMethod = 'put'
    uri = "https://sourceforge.net/projects/argo/files/argo/${version}//argo-${version}.jar"
    requestContentType = groovyx.net.http.ContentType.URLENC
    contentType = groovyx.net.http.ContentType.JSON
    requestBody = "default=windows&default=mac&default=linux&default=bsd&default=solaris&default=others&download_label=${version}%20with%20source&api_key=$sourceforgeApiKey"
}

// Signature of artifacts
signing {
    sign configurations.archives
}

// OSSRH publication
uploadArchives {
    repositories {
        mavenDeployer {
            // POM signature
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            // Target repository
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUser, password: ossrhPassword)
            }
            pom.scopeMappings.with {
                mappings.clear()
            }
            pom.project {
                name 'Argo'
                description project.description
                packaging 'jar'
                url 'http://argo.sourceforge.net'

                scm {
                    url "https://svn.code.sf.net/p/argo/code/tags/${version}"
                }

                developers {
                    developer {
                        id = 'mos20'
                        name = 'Mark Slater'
                    }
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

            }
        }
    }
}

nexusStaging {
    username = ossrhUser
    password = ossrhPassword
}

task svnTag(type: SvnTag) {
    tagName = "$version"
    svnUrl = 'https://svn.code.sf.net/p/argo/code/trunk'
    commitMessage = "Tag for release ${version}."
    username = "$sourceforgeUser"
    password = "$sourceforgePassword"
}

task cleanExport(type: at.bxm.gradleplugins.svntools.tasks.SvnExport, dependsOn: [clean, svnTag]) {
    svnUrl = "https://svn.code.sf.net/p/argo/code/tags/${version}"
    targetDir = "$project.buildDir/export"
}

task buildAndDeployCleanVersion(type: GradleBuild, dependsOn: cleanExport) {
    buildFile = "$project.buildDir/export/build.gradle"
    tasks = ['clean', 'performRelease']
}

task aMomentOfReflection() {
    doLast{
        sleep(30 * 1000)
    }
}

build.mustRunAfter clean
uploadArchives.mustRunAfter build
closeRepository.mustRunAfter uploadArchives
aMomentOfReflection.mustRunAfter closeRepository
promoteRepository.mustRunAfter aMomentOfReflection
updateSourceforgeDefaultDownload.mustRunAfter copyToSourceforge

task performRelease(dependsOn: [clean, build, uploadArchives, copyToSourceforge, png, closeRepository, aMomentOfReflection, promoteRepository, updateSourceforgeDefaultDownload]) {
    doLast {
        println 'Release complete :)'
    }
}

task incrementVersionNumber(dependsOn: buildAndDeployCleanVersion) {
    doLast {
        ant.propertyfile(file: file('gradle.properties')) {
            entry(key: 'minorVersion', type: 'int', operation: '+', value: 1)
        }
    }
}

task commitVersionNumber(type: SvnCommit, dependsOn: incrementVersionNumber) {
    source << file('gradle.properties')
    commitMessage = 'Increment version number'
    username = "$sourceforgeUser"
    password = "$sourceforgePassword"
}

task deploy(dependsOn: commitVersionNumber) {
    doLast {}
}